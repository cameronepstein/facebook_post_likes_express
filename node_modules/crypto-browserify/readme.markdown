# crypto-browserify

<<<<<<< HEAD
A (partial) port of node's `crypto` module to the browser.
=======
A (partial) port of `crypto` to the browser.

>>>>>>> async_paging

[![travis](https://secure.travis-ci.org/dominictarr/crypto-browserify.png?branch=master)](https://travis-ci.org/dominictarr/crypto-browserify)

[![browser support](http://ci.testling.com/dominictarr/crypto-browserify.png)](http://ci.testling.com/dominictarr/crypto-browserify)

<<<<<<< HEAD
The goal of this module is to reimplement node's crypto module,
in pure javascript so that it can run in the browser.

Here is the subset that is currently implemented:

* createHash (sha1, sha256, sha512, md5, rmd160)
* createHmac (sha1, sha256, sha512, md5)
* pbkdf2
* pbkdf2Sync
* randomBytes

## TODO

The highest priority unimplemented features are

* createDiffieHelman
* createCipher (aes)
* createDecipher (aes)
* createSign (rsa)
* createVerify (rsa)

## contributions

If you are interested in writing a feature, please implement as a new module,
which will be incorporated into crypto-browserify as a dependency.

All deps must be compatible with node's crypto
(generate example inputs and outputs with node,
and save base64 strings inside JSON, so that tests can run in the browser.
see [sha.js](https://github.com/dominictarr/sha.js)

Crypto is _extra serious_ so please do not hesitate to review the code,
and post comments if you do.

## License

MIT

=======

Basically, I found some crypto implemented in JS lieing on the internet somewhere
and wrapped it in the part of the `crypto` api that I am currently using.

In a way that will be compatible with [browserify](https://github.com/substack/node-browserify/).

I will extend this if I need more features, or if anyone else wants to extend this,
I will add you as a maintainer.

Provided that you agree that it should replicate the [node.js/crypto](http://nodejs.org/api/crypto.html) api exactly, of course.
>>>>>>> async_paging

